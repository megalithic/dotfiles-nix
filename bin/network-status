#!/bin/bash

# Script to get network device information, connection status, and IP addresses
# for Wi-Fi and actively connected Thunderbolt Ethernet interfaces
#
# Usage:
#   network-status              # Show full report
#   network-status -d wifi      # Get device for connected wifi
#   network-status --device ethernet  # Get device for connected ethernet

# Function to parse network services and their devices
# Output format: "Service Name|Device"
get_all_network_services() {
    networksetup -listnetworkserviceorder | awk '
        /^\([0-9]+\) / {
            service = $0
            sub(/^\([0-9]+\) /, "", service)
            getline
            if ($0 ~ /\(Hardware Port:.*Device: /) {
                # Extract device name using sub/gsub
                device = $0
                sub(/.*Device: /, "", device)
                sub(/\).*/, "", device)
                print service "|" device
            }
        }
    '
}

# Function to check if a network service has an active connection
# Returns 0 (true) if connected with an IP, 1 (false) otherwise
is_service_connected() {
    local service_name="$1"
    local info=$(networksetup -getinfo "$service_name" 2>/dev/null)

    # Check if the service has an IP address assigned
    # A connected service will have "IP address: x.x.x.x" in the output
    if echo "$info" | grep -q "^IP address:"; then
        local ip=$(echo "$info" | grep "^IP address:" | awk '{print $3}')
        # Make sure it's not empty or 0.0.0.0
        if [[ -n "$ip" && "$ip" != "0.0.0.0" ]]; then
            return 0
        fi
    fi

    return 1
}

# Function to get IPv4 address from device
get_ipv4() {
    local device="$1"
    ipconfig getifaddr "$device" 2>/dev/null
}

# Function to get IPv6 addresses from device (excluding link-local)
get_ipv6() {
    local device="$1"
    /sbin/ifconfig "$device" 2>/dev/null | grep -o 'inet6 [0-9a-f:]*' | grep -v '^inet6 fe80:' | awk '{print $2}'
}

# Function to check if device is active via ifconfig
is_device_active() {
    local device="$1"
    /sbin/ifconfig "$device" 2>/dev/null | grep -q "status: active"
}

# Function to check if service is connected (combines both checks)
is_connected() {
    local service_name="$1"
    local device="$2"

    if is_service_connected "$service_name" || is_device_active "$device"; then
        return 0
    fi
    return 1
}

# Function to find device by fuzzy/regex matching the service name
find_device_by_name() {
    local search_term="$1"
    local all_services=$(get_all_network_services)

    # Convert search term to lowercase and remove non-alphanumeric chars for fuzzy matching
    local search_normalized=$(echo "$search_term" | tr '[:upper:]' '[:lower:]' | tr -d -c '[:alnum:]')

    # Process each network service
    while IFS='|' read -r service_name device; do
        # Convert service name to lowercase and remove non-alphanumeric chars
        local service_normalized=$(echo "$service_name" | tr '[:upper:]' '[:lower:]' | tr -d -c '[:alnum:]')

        # Check if search term is contained in service name (fuzzy match)
        if [[ "$service_normalized" =~ $search_normalized ]]; then
            # Check if this service is connected
            if is_connected "$service_name" "$device"; then
                echo "$device"
                return 0
            fi
        fi
    done <<< "$all_services"

    # No matching connected service found
    return 1
}

# Function to print network info for a service
print_service_info() {
    local service_name="$1"
    local device="$2"

    echo "[$service_name]"
    echo "  Device: $device"

    if is_connected "$service_name" "$device"; then
        echo "  Status: CONNECTED"

        # Get IPv4
        local ipv4=$(get_ipv4 "$device")
        if [[ -n "$ipv4" ]]; then
            echo "  IPv4:   $ipv4"
        else
            echo "  IPv4:   None"
        fi

        # Get IPv6
        local ipv6=$(get_ipv6 "$device")
        if [[ -n "$ipv6" ]]; then
            echo "  IPv6:   $ipv6"
        else
            echo "  IPv6:   None"
        fi

        return 0  # Connected
    else
        echo "  Status: NOT CONNECTED"
        return 1  # Not connected
    fi
}

# Function to show full report
show_full_report() {
    echo "Network Status Report"
    echo "===================="
    echo

    # Get all network services
    all_services=$(get_all_network_services)

    # Track connection status
    wifi_connected=false
    ethernet_connected=false
    ethernet_services=()

    # Process each network service
    while IFS='|' read -r service_name device; do
        # Check if this is Wi-Fi
        if [[ "$service_name" == "Wi-Fi" ]]; then
            print_service_info "$service_name" "$device"
            if is_connected "$service_name" "$device"; then
                wifi_connected=true
            fi
            echo
        # Check if this is a Thunderbolt or USB Ethernet service
        elif [[ "$service_name" =~ Thunderbolt.*Ethernet ]] || [[ "$service_name" =~ USB.*Ethernet ]]; then
            # Check if this service is connected
            if is_connected "$service_name" "$device"; then
                print_service_info "$service_name" "$device"
                ethernet_connected=true
                ethernet_services+=("$service_name")
                echo
            fi
        fi
    done <<< "$all_services"

    # Show disconnected ethernet message if none found
    if [[ "$ethernet_connected" == false ]]; then
        echo "[Thunderbolt/USB Ethernet]"
        echo "  Status: NO ACTIVE CONNECTION"
        echo
    fi

    # Summary
    echo "Summary"
    echo "-------"

    if $wifi_connected && $ethernet_connected; then
        echo "Connected via: Wi-Fi AND Ethernet"
        if [[ ${#ethernet_services[@]} -gt 0 ]]; then
            echo "Active Ethernet: ${ethernet_services[*]}"
        fi
    elif $wifi_connected; then
        echo "Connected via: Wi-Fi only"
    elif $ethernet_connected; then
        echo "Connected via: Ethernet only"
        if [[ ${#ethernet_services[@]} -gt 0 ]]; then
            echo "Active Ethernet: ${ethernet_services[*]}"
        fi
    else
        echo "Connected via: NEITHER (No active connection)"
    fi
}

# Main script - Parse arguments
device_mode=false
search_term=""

while [[ $# -gt 0 ]]; do
    case "$1" in
        -d|--device)
            device_mode=true
            search_term="$2"
            shift 2
            ;;
        *)
            echo "Unknown option: $1" >&2
            echo "Usage: $0 [-d|--device <search_term>]" >&2
            exit 1
            ;;
    esac
done

# Execute based on mode
if $device_mode; then
    if [[ -z "$search_term" ]]; then
        echo "Error: -d|--device requires a search term" >&2
        exit 1
    fi

    device=$(find_device_by_name "$search_term")
    if [[ $? -eq 0 ]]; then
        echo "$device"
        exit 0
    else
        exit 1
    fi
else
    show_full_report
fi
