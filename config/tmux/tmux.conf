# vim:ft=tmux

# -- [ general settings ] ------------------------------------------------------

set -g history-limit 50000
set -g default-shell "/etc/profiles/per-user/${USER}/bin/fish"
set -g update-environment "DISPLAY SSH_AUTH_SOCK SSH_ASKPASS SSH_AGENT_PID SSH_CONNECTION SSH_HOME WINDOWID XAUTHORITY SSHHOME TMUX GPG_AGENT" # https://github.com/cdown/dotfiles/blob/master/.tmux.conf

# if-shell 'infocmp tmux-256color' { set default-terminal tmux-256color } { set default-terminal screen-256color }

# NOTE: this overrides specify terminal capabilities you are overriding within tmux,
# this should "normally" be "xterm-256color" or "tmux-256color" but in the case of
# kitty it should be "xterm-kitty" so the solution/workaround here is to use the
# value of $TERM. This might not work for all terminals.
# see:
# https://jdhao.github.io/2018/10/19/tmux_nvim_true_color/
# https://sw.kovidgoyal.net/kitty/conf/#opt-kitty.term
set -g default-terminal "xterm-ghostty" # alts: xterm-ghostty,wezterm,screen-254color,xterm-256color,xterm-kitty,tmux-256color
set -g default-terminal "${TERM}"

# True colour support, the terminal info is from the outside of tmux https://sunaku.github.io/tmux-24bit-color.html#usage
set -ga terminal-overrides ",${TERM}:Tc"
set -as terminal-overrides ",${TERM}:RGB"
set -as terminal-features ",${TERM}:RGB"
# Neovim cursor changing support https://github.com/neovim/neovim/wiki/FAQ#cursor-shape-doesnt-change-in-tmux
set -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'
# Italics support
# set -as terminal-overrides ",${TERM}:sitm=\E[3m"
set -as terminal-overrides ',xterm*:sitm=\E[3m'
# Strikethrough support https://github.com/tmux/tmux/issues/612#issuecomment-288408841
set -as terminal-overrides ',xterm*:smxx=\E[9m'
# set -as terminal-overrides ",${TERM}:smxx=\E[9m"
set -ga terminal-features '*:clipboard:strikethrough:usstyle:RGB'
# Undercurl support
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'
# Enable colored underlines (e.g. in Vim)
set -a terminal-features '*:usstyle'

set -sa terminal-features ',xterm-ghostty:RGB'
set -sa terminal-features ',xterm-ghostty:clipboard'
# Add colors to underscore/undercurl inside neovim [source: https://github.com/folke/tokyonight.nvim#making-undercurls-work-properly-in-tmux]
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

# # True colour support, the terminal info is from the outside of tmux https://sunaku.github.io/tmux-24bit-color.html#usage
# set -ga terminal-overrides ",*:Tc"
# set -as terminal-overrides ",*:RGB"
# # Neovim cursor changing support https://github.com/neovim/neovim/wiki/FAQ#cursor-shape-doesnt-change-in-tmux
# set -ga terminal-overrides ",*:Ss=\E[%p1%d q:Se=\E[2 q"
# # Italics support
# # set -as terminal-overrides ",${TERM}:sitm=\E[3m"
# set -as terminal-overrides ",xterm*:sitm=\E[3m"
# # Strikethrough support https://github.com/tmux/tmux/issues/612#issuecomment-288408841
# set -as terminal-overrides ",xterm*:smxx=\E[9m"
# # Undercurl support
# set -as terminal-overrides ",*:Smulx=\E[4::%p1%dm"
#
# set -sa terminal-features ",*:RGB"
# set -sa terminal-features ",*:clipboard"
# set -ga terminal-features ",*:clipboard:strikethrough:usstyle:RGB"
# # Enable colored underlines (e.g. in Vim)
# set -a terminal-features ",*:usstyle"
#
# # Add colors to underscore/undercurl inside neovim [source: https://github.com/folke/tokyonight.nvim#making-undercurls-work-properly-in-tmux]
# set -as terminal-overrides ",*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m"  # underscore colours - needs tmux-3.0

set -gq allow-passthrough on
set extended-keys on # allows for meta, ctrl, opt keys, etc.
set -g base-index 1 # 0 by default
set -g renumber-windows on # re-number windows when one is closed
set -g mouse on
set -g assume-paste-time 0            # Disable assume-paste-time, so that iTerm2's "Send Hex Codes" feature works with tmux 2.1. (https://github.com/edruder/maximum-awesome/commit/9e3d07f450ac60ec142c82e8b2ffb2777bf99fb4)
set -g repeat-time 0                  # Allow the arrow key to be used immediately after changing windows
set -sg escape-time 10
set -g focus-events on
set -w -g wrap-search off
set -g detach-on-destroy off
set -g visual-bell off
set -g bell-action none
setw -g pane-base-index 1
setw -g xterm-keys on
setw -g aggressive-resize on          # allows multiple sessions to connect to the same server. only shows the resize border when both sessions are on the same windowe
setw -g monitor-activity on
setw -g visual-activity off
setw -g mode-keys vi
set -g status on
set -g status-interval 3
set -g status-justify left
set -g status-position top
set -g set-titles on
set -g allow-rename on
set -g automatic-rename on
set -g automatic-rename-format "#{pane_current_command}"
set -g set-titles-string "◫ #S:#I#(tmux-fancy-numbers\ #P) ◦ #{pane_current_command}"
set -g display-time 1000
set -g display-panes-time 800
setw -g other-pane-height 25
setw -g other-pane-width 80
# To copy, left click and drag to highlight text in yellow,
# once you release left click yellow text will disappear and will automatically be available in clibboard
# # Use vim keybindings in copy mode
setw -g mode-keys vi
set -g status-keys emacs
set -g @yank_action "copy-pipe"
set -g @scroll-down-exit-copy-mode "off"

set-hook -g pane-focus-in 'run-shell "tmux-pane-focus --onfocus"'

# -- [ key bindings ] ----------------------------------------------------------

unbind C-a
unbind C-b
unbind C-space
unbind space
unbind c
unbind g
unbind C-g
unbind C-z
unbind -T copy-mode-vi 'Enter'
unbind C-/
unbind C-d
unbind |
unbind -
unbind s

set -g prefix C-space
bind C-space send-prefix

# = to see current bindings: `tmux list-keys` or <prefix-?>

bind -r C-r \
  set @mode_indicator_custom_prompt "  RELOADING " \; \
  set @mode_indicator_custom_mode_style 'fg=#3c474d,bg=#e67e80,italics' \; \
  source-file "~/.config/tmux/tmux.conf" \; \
  set -u @mode_indicator_custom_prompt \; \
  set -u @mode_indicator_custom_mode_style \; \
  refresh-client \;

bind -T copy-mode-vi "?" command-prompt -ip "search up:" "send -X search-backward-incremental '%%%'"
bind -T copy-mode-vi "/" command-prompt -ip "search down:" "send -X search-forward-incremental '%%%'"
bind v split-window -h -l 45% -c "#{pane_current_path}"
bind s split-window -v -l 45% -c "#{pane_current_path}"

is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
not_tmux="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?(g?(view|n?vim?x?)(diff)?|fzf|lazygit)$'"

bind-key -n C-h if-shell "$not_tmux" "send-keys C-h" "select-pane -L"
bind-key -n C-j if-shell "$not_tmux" "send-keys C-j" "select-pane -D"
bind-key -n C-k if-shell "$not_tmux" "send-keys C-k" "select-pane -U"
bind-key -n C-l if-shell "$not_tmux" "send-keys C-l" "select-pane -R"

bind-key -n M-h if-shell "$not_tmux" "send-keys M-h" "resize-pane -L 3"
bind-key -n M-j if-shell "$not_tmux" "send-keys M-j" "resize-pane -D 3"
bind-key -n M-k if-shell "$not_tmux" "send-keys M-k" "resize-pane -U 3"
bind-key -n M-l if-shell "$not_tmux" "send-keys M-l" "resize-pane -R 3"


bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\\ select-pane -l

# not_tmux="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?(g?(view|n?vim?x?)(diff)?|fzf|lazygit)$'"
#
# bind-key -n C-h if-shell "$not_tmux" 'send-keys C-h'  'select-pane -L'
# bind-key -n C-j if-shell "$not_tmux" 'send-keys C-j'  'select-pane -D'
# bind-key -n C-k if-shell "$not_tmux" 'send-keys C-k'  'select-pane -U'
# bind-key -n C-l if-shell "$not_tmux" 'send-keys C-l'  'select-pane -R'
#
# bind-key -n M-h if-shell "$not_tmux" 'send-keys M-h' 'resize-pane -L 3'
# bind-key -n M-j if-shell "$not_tmux" 'send-keys M-j' 'resize-pane -D 3'
# bind-key -n M-k if-shell "$not_tmux" 'send-keys M-k' 'resize-pane -U 3'
# bind-key -n M-l if-shell "$not_tmux" 'send-keys M-l' 'resize-pane -R 3'
#
# bind-key -T copy-mode-vi 'C-h' select-pane -L
# bind-key -T copy-mode-vi 'C-j' select-pane -D
# bind-key -T copy-mode-vi 'C-k' select-pane -U
# bind-key -T copy-mode-vi 'C-l' select-pane -R

bind -r H resize-pane -L 10
bind -r J resize-pane -D 10
bind -r K resize-pane -U 10
bind -r L resize-pane -R 10

# kill the session
  bind -r C-k confirm -p "kill-session #{session_name}? (y/n)" "kill-session"
# kill the window
  bind -r C-x confirm -p "kill-window #{window_name}? (y/n)" "kill-window"
# kill the pane
  bind x confirm -p "kill-pane #{pane_index}? (y/n)" "kill-pane"
# new window
  bind -r C-t new-window -c "#{pane_current_path}"
  bind t new-window -c "#{pane_current_path}"

# bind Tab last-window        # move to last active window

# bind-key C-j join-pane
# bind-key C-l link-pane

bind -r C-H swap-window -t -1 # move window one position to the left
bind -r C-L swap-window -t +1 # move window one position to the right

# Pressing Ctrl+Shift+Left (will move the current window to the left. Similarly
# right. No need to use the modifier (C-b).
bind -n C-S-Left swap-window -t -1
bind -n C-S-Right swap-window -t +1

# Make the current window the first window
bind T swap-window -t 1

# create new session
bind C-c command-prompt -p "  new session ->" "run-shell \"ftm %1\""

bind C-Space display-popup -T " sessions " -w "30%" -h "30%" "ftm -p && tmux display-popup -C"

# switch to my main specific session if switch-client -l fails..
bind -r C-l run-shell "\
  tmux switch-client -l; \
  if [ $? -eq 0 ]; then \
    tmux refresh-client; \
  else \
    tmux switch-client -t mega; \
    tmux refresh-client; \
  fi; \
"

bind -r g display-popup -w "80%" -h "80%" -d "#{pane_current_path}" -E "lazygit"
bind -r C-g display-popup -w "80%" -h "80%" -d "#{pane_current_path}" -E "lazygit"

bind C-o run-shell "daily_note -m note"
bind C-e run-shell "tmux neww nvim +c :Telescope find_files cwd=~/Documents/_notes"

bind C-s display-popup -w "25%" -h "25%" "export TMUX_POPUP=1 && slck; tmux display-popup -C"

bind -r C-w display-popup -E "\
    tmux list-windows -F '#{window_index} #{window_name}' |\
    sed '/^$/d' |\
    fzf --reverse --header jump-to-window |\
    cut -d ' ' -f 1 |\
    xargs tmux select-window -t"

bind -r C-b copy-mode

# select text with 'v' and copy with 'y'
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi V send-keys -X select-line
bind -T copy-mode-vi 'C-v' send-keys -X rectangle-toggle
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
bind -T copy-mode-vi Escape send-keys -X cancel
bind -T copy-mode-vi 'Enter' send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

# -- copy with a mouse
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M
bind -n C-WheelUpPane select-pane -t= \; copy-mode -e \; send-keys -M
bind -T copy-mode-vi    C-WheelUpPane   send-keys -X halfpage-up
bind -T copy-mode-vi    C-WheelDownPane send-keys -X halfpage-down
bind -T copy-mode-emacs C-WheelUpPane   send-keys -X halfpage-up
bind -T copy-mode-emacs C-WheelDownPane send-keys -X halfpage-down

# Update default binding of `Enter` to also use copy-pipe
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-no-clear "pbcopy"

# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | pbcopy"'
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'

# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'

source "~/.config/tmux/megaforest.tmux.conf"
source "~/.config/tmux/plugins.tmux.conf"
